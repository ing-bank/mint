package com.ing.mint.espressoRunner.state

import android.graphics.Bitmap
import android.util.Log
import androidx.test.platform.app.InstrumentationRegistry
import com.ing.mint.android.base64.Encoder
import org.w3c.dom.Document
import org.w3c.dom.Node
import java.io.ByteArrayOutputStream

object Screenshot {
    private val IMAGE_FORMAT_PNG = Bitmap.CompressFormat.PNG
    private const val IMAGE_QUALITY = 50
    private const val MAX_TRIES = 3
    private const val TAG = "o.m.e.s.Screenshot"

    // Note: inlined for simplicity, a black image stating 'failed to take a screenshot'
    private const val SCREENSHOT_FAILED = "iVBORw0KGgoAAAANSUhEUgAAAYYAAAE4CAYAAABfQFTgAAABX2lDQ1BJQ0MgUHJvZmlsZQAAKJFtkT9Lw1AUxU9spSoRRTs4iGQQp1q0dnBtK1RphxIV1EFI05oKafpIoiI46h5wchCkOvkB/Df5AQQHwUHEwcHRRSyClnhfo6ZVH1zOj8N5j8t5QFuHwpgeBFA2bFNOJ6WFxSUp9IRODKEbAYQV1WKJXC5LEXxr66ndQuB6M8rfEp8vjPH99fP+x+WM9Xac/JtvOV2FoqWSftBEVWbagBAhzm3YjPMWcdikpYgdzprHR5zzHp81MnNyiviKuFctKQXie+JIvsnXmrisr6lfO/DtxaIxP0vaRzOILNKQMI0pyKRxZKif//PxRj6FChg2YWIVGkqw6VaCHAYdReIZGFARRYQ4hjGaGO/5d3++V6kCk69AwPG9/B5wugMM3Pne8AHQsw2cXDPFVH5aFWpBa2Ui5rFIf9D+4LovI0BoF6g7rvtedd36Ib1PHV0anwl+Y8e7cplGAAAAimVYSWZNTQAqAAAACAAEARoABQAAAAEAAAA+ARsABQAAAAEAAABGASgAAwAAAAEAAgAAh2kABAAAAAEAAABOAAAAAAAAAJAAAAABAAAAkAAAAAEAA5KGAAcAAAASAAAAeKACAAQAAAABAAABhqADAAQAAAABAAABOAAAAABBU0NJSQAAAFNjcmVlbnNob3QUg/IaAAAACXBIWXMAABYlAAAWJQFJUiTwAAAB1mlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDxleGlmOlBpeGVsWURpbWVuc2lvbj4zMTI8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MzkwPC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6VXNlckNvbW1lbnQ+U2NyZWVuc2hvdDwvZXhpZjpVc2VyQ29tbWVudD4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CuYWut0AAAAcaURPVAAAAAIAAAAAAAAAnAAAACgAAACcAAAAnAAAGQypKRPZAAAY2ElEQVR4AeydBcw0tdqGy8Hd3d0JwYJDOMHdHYIGAsGd4BDgENzdCQQP7haCSyBYcHcPLu/p3Z/OPzvvzG7n2f0OH801yfvu7Eyfts9VuWc67ewozrkh/8cGAQhAAAIQCARG8f8RBioDBCAAAQgUBBCGAgU7EIAABCAgAggD9QACEIAABDoIIAwdOPgCAQhAAAIIA3UAAhCAAAQ6CCAMHTj4AgEIQAACjcIw4YQTukkmmaQnoR9//NF9+umnteH+9a9/uRlnnDGc++abb9zXX39dG04HZ5555sZz5ROKQ3HFbeKJJ3YTTTSR+/PPP927774bD/f8nHLKKd0444zTM9zbb79dhBlzzDHdNNNMU3zXzm+//Rb8+uGHHzqO9/sl+tUmnt9//929//77HSaKZ84553Tzzz+/0/6LL77oXnnlFffOO+90hLN+GVQ+lX5qfRljjDHctNNOG7L8ySefuJ9++mlY9kcbbTQ3/fTTh+Plumcp92GRGw+k+meMvsNMdXvJJZcMDFRnf/nlF/fee++5Dz/80KlOf/TRRx3hq19mn312t9hii7npppsunFKdef3110MbU5vXNu6447opppgi7Jf/KS21h2+//bZ8uGPfWg4Wu8kmm8yNP/74rltfFX1p6kfa8Izp1bXHCCG2m6b0UtttjCfGm/LZLV/RvlEYllpqKXfMMcfEcI2fd9xxhzv++ONrz88111zunHPOCeeuv/56d/rpp9eG08F7773XqTH32o444gj3wAMPFMHWWGMNt88++4RKuPbaaxfHe+3ssccebp111ukVzK2wwgpBdBRQ4nXxxRfX2nz//ffurrvucjfffPOwzrnWoMfBNddc0+299949QnWefvPNN912221XHJx11lndiSeeGISzOPjXzgUXXOCuuOKK6uHW3weRz5hoan1Rh3/55ZcHsx122CF0WDGO+CkOW265pfv444/dzjvvXFxMWMo9xtnvZ6p//aaz6KKLhroz1VRT1UalenrsscfWnlNHv9dee7nFF1+89vyTTz7p9ttvv3Buvvnmc2eccUZtOB3Uhdoll1zS0V5jYGs5WOxUD1QfdFG59dZbu++++y5mo/iMvijMuuuuWxzXTlueMb233nrLbbvtth1xxS+rr76623fffUOequm1abeDbH8xb/pMEgZ1/n/88UfZrth/+eWX3e233158L++oELbZZptw6PPPP3cbb7xx0cmWw2lfneAooyg7/7cJnL4///zz7oMPPoiHQ1pKM279CsMXX3zhHn/88RjdsE91rENDQ+F4WRgefvjhUMHilcY888wT8qurVzUsXWH1sy277LJus802GxaFOhdtulIu3znpmK4CjzzySO06XfGddNJJ4UrpiSeecNddd5376quv3BJLLBEaidiq0eqvn63ffJbTTq0vvYRBV7r/+c9/wt3crrvu6l577bUimdixtCn3wrjPnVT/+klGV/gS/bHGGsupY7rnnntC/db32Wabzc0xxxxObfGyyy4bloy4nnDCCU6Coqv9Cy+80L3wwguh7U899dROZa0r1IMPPjjYxs5UX+677z73888/h7sIjTSonurOTtv555/vrrzyyrAf/1nLwWIXO2qlfd5557mrrroqZqP4jL5UhcHCM6ZnEYa27XaQ7a+A8deOer1hf/6OYejBBx8Mf76Ah52vs6keu+iii4o4FJevLMnx+IoWbP0Ve1cbLwwhnL9S7xqumjdfwYKdv9tJtvPCUPij/XKc/nZ9yN8dhfM33XTT0AQTTNBxvhy2n/1ULqeeemrIyymnnDI09thjd+RltdVWK/yYaaaZOs71k7eybWo+yzap9cV3YEX+fUPqyL/K4ZZbbgnn11prrY5zSstS7uU89rOf6l8/aey///7Bd9VFP/Q5zP+muP0w19C5554bbK+99tohLw61tuW65DvTohz8nUZH+EknnXTokEMOCef9Hf6QF5SO89ZysNj5jrrIp7+IHfLC1ZEXMYm+3HjjjR3nLDxjeirvJt7+wjfkqZreoNqtpf1V8jpcFBSgX2HwShscVwZjQ/VXTI2gKpkaSnVsZBEG5d8/Txm6++67g98bbbRRsq9V37t9T+FSFrCmjv+0004L+dxpp53+tnyW/WxTX5qEQRcwZ555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"

    fun toNode(doc: Document): Node {
        val screenshot = doc.createElement("Screenshot")

        val bytes = ByteArrayOutputStream()

        // Note: sometimes sShot seems to be null (I cannot explain why)
        // java.lang.NullPointerException: Attempt to invoke virtual method 'boolean android.graphics.Bitmap.compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream)' on a null object reference
        // otherwise, proceed without an image
        val encoder = Encoder.apply()
        var reason: String? = null
        for (i in 0 until MAX_TRIES) {
            try {
                val sShot = InstrumentationRegistry.getInstrumentation()
                    .uiAutomation
                    .takeScreenshot()

                sShot.compress(IMAGE_FORMAT_PNG, IMAGE_QUALITY, bytes)

                val content = screenshot.ownerDocument.createCDATASection(encoder.encode(bytes.toByteArray()))
                screenshot.appendChild(content)
                screenshot.setAttribute("width", sShot.width.toString())
                screenshot.setAttribute("height", sShot.height.toString())
                break
            } catch (e: Exception) {
                Log.e(TAG, "Failed to take a screenshot at attempt ${i + 1} of $MAX_TRIES", e)
                reason = e.message
            }
        }

        // As a backup: if taking a screenshot failed, include this failure placeholder
        if (!screenshot.hasChildNodes()) {
            val content = screenshot.ownerDocument.createCDATASection(SCREENSHOT_FAILED)
            screenshot.appendChild(content)
            screenshot.setAttribute("width", "390")
            screenshot.setAttribute("height", "312")
            screenshot.setAttribute("failed", "true")
            reason?.let { screenshot.setAttribute("reason", it) }
        }

        return screenshot
    }
}
